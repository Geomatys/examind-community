/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables.daos;


import java.util.List;

import org.constellation.database.api.jooq.tables.MetadataXCsw;
import org.constellation.database.api.jooq.tables.records.MetadataXCswRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataXCswDao extends DAOImpl<MetadataXCswRecord, org.constellation.database.api.jooq.tables.pojos.MetadataXCsw, Record2<Integer, Integer>> {

    /**
     * Create a new MetadataXCswDao without any configuration
     */
    public MetadataXCswDao() {
        super(MetadataXCsw.METADATA_X_CSW, org.constellation.database.api.jooq.tables.pojos.MetadataXCsw.class);
    }

    /**
     * Create a new MetadataXCswDao with an attached configuration
     */
    public MetadataXCswDao(Configuration configuration) {
        super(MetadataXCsw.METADATA_X_CSW, org.constellation.database.api.jooq.tables.pojos.MetadataXCsw.class, configuration);
    }

    @Override
    public Record2<Integer, Integer> getId(org.constellation.database.api.jooq.tables.pojos.MetadataXCsw object) {
        return compositeKeyRecord(object.getMetadataId(), object.getCswId());
    }

    /**
     * Fetch records that have <code>metadata_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.MetadataXCsw> fetchRangeOfMetadataId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MetadataXCsw.METADATA_X_CSW.METADATA_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>metadata_id IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.MetadataXCsw> fetchByMetadataId(Integer... values) {
        return fetch(MetadataXCsw.METADATA_X_CSW.METADATA_ID, values);
    }

    /**
     * Fetch records that have <code>csw_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.MetadataXCsw> fetchRangeOfCswId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MetadataXCsw.METADATA_X_CSW.CSW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>csw_id IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.MetadataXCsw> fetchByCswId(Integer... values) {
        return fetch(MetadataXCsw.METADATA_X_CSW.CSW_ID, values);
    }
}
