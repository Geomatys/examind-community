/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.constellation.database.api.jooq.Admin;
import org.constellation.database.api.jooq.Keys;
import org.constellation.database.api.jooq.tables.records.PropertyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Property extends TableImpl<PropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.property</code>
     */
    public static final Property PROPERTY = new Property();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyRecord> getRecordType() {
        return PropertyRecord.class;
    }

    /**
     * The column <code>admin.property.name</code>.
     */
    public final TableField<PropertyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>admin.property.value</code>.
     */
    public final TableField<PropertyRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private Property(Name alias, Table<PropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Property(Name alias, Table<PropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.property</code> table reference
     */
    public Property(String alias) {
        this(DSL.name(alias), PROPERTY);
    }

    /**
     * Create an aliased <code>admin.property</code> table reference
     */
    public Property(Name alias) {
        this(alias, PROPERTY);
    }

    /**
     * Create a <code>admin.property</code> table reference
     */
    public Property() {
        this(DSL.name("property"), null);
    }

    public <O extends Record> Property(Table<O> child, ForeignKey<O, PropertyRecord> key) {
        super(child, key, PROPERTY);
    }

    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    @Override
    public UniqueKey<PropertyRecord> getPrimaryKey() {
        return Keys.PROPERTY_PK;
    }

    @Override
    public List<UniqueKey<PropertyRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertyRecord>>asList(Keys.PROPERTY_PK);
    }

    @Override
    public Property as(String alias) {
        return new Property(DSL.name(alias), this);
    }

    @Override
    public Property as(Name alias) {
        return new Property(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Property rename(String name) {
        return new Property(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Property rename(Name name) {
        return new Property(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
