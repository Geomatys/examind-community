/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.constellation.database.api.jooq.Admin;
import org.constellation.database.api.jooq.Keys;
import org.constellation.database.api.jooq.tables.records.ThesaurusRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Thesaurus extends TableImpl<ThesaurusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.thesaurus</code>
     */
    public static final Thesaurus THESAURUS = new Thesaurus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThesaurusRecord> getRecordType() {
        return ThesaurusRecord.class;
    }

    /**
     * The column <code>admin.thesaurus.id</code>.
     */
    public final TableField<ThesaurusRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>admin.thesaurus.uri</code>.
     */
    public final TableField<ThesaurusRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>admin.thesaurus.name</code>.
     */
    public final TableField<ThesaurusRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>admin.thesaurus.description</code>.
     */
    public final TableField<ThesaurusRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>admin.thesaurus.creation_date</code>.
     */
    public final TableField<ThesaurusRecord, Long> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>admin.thesaurus.state</code>.
     */
    public final TableField<ThesaurusRecord, Boolean> STATE = createField(DSL.name("state"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>admin.thesaurus.defaultlang</code>.
     */
    public final TableField<ThesaurusRecord, String> DEFAULTLANG = createField(DSL.name("defaultlang"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>admin.thesaurus.version</code>.
     */
    public final TableField<ThesaurusRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>admin.thesaurus.schemaname</code>.
     */
    public final TableField<ThesaurusRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR(100), this, "");

    private Thesaurus(Name alias, Table<ThesaurusRecord> aliased) {
        this(alias, aliased, null);
    }

    private Thesaurus(Name alias, Table<ThesaurusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.thesaurus</code> table reference
     */
    public Thesaurus(String alias) {
        this(DSL.name(alias), THESAURUS);
    }

    /**
     * Create an aliased <code>admin.thesaurus</code> table reference
     */
    public Thesaurus(Name alias) {
        this(alias, THESAURUS);
    }

    /**
     * Create a <code>admin.thesaurus</code> table reference
     */
    public Thesaurus() {
        this(DSL.name("thesaurus"), null);
    }

    public <O extends Record> Thesaurus(Table<O> child, ForeignKey<O, ThesaurusRecord> key) {
        super(child, key, THESAURUS);
    }

    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    @Override
    public Identity<ThesaurusRecord, Integer> getIdentity() {
        return (Identity<ThesaurusRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ThesaurusRecord> getPrimaryKey() {
        return Keys.THESAURUS_PK;
    }

    @Override
    public List<UniqueKey<ThesaurusRecord>> getKeys() {
        return Arrays.<UniqueKey<ThesaurusRecord>>asList(Keys.THESAURUS_PK);
    }

    @Override
    public Thesaurus as(String alias) {
        return new Thesaurus(DSL.name(alias), this);
    }

    @Override
    public Thesaurus as(Name alias) {
        return new Thesaurus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Thesaurus rename(String name) {
        return new Thesaurus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Thesaurus rename(Name name) {
        return new Thesaurus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, Long, Boolean, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
