/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.constellation.database.api.jooq.Admin;
import org.constellation.database.api.jooq.Indexes;
import org.constellation.database.api.jooq.Keys;
import org.constellation.database.api.jooq.tables.records.MapcontextRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapcontext extends TableImpl<MapcontextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.mapcontext</code>
     */
    public static final Mapcontext MAPCONTEXT = new Mapcontext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapcontextRecord> getRecordType() {
        return MapcontextRecord.class;
    }

    /**
     * The column <code>admin.mapcontext.id</code>.
     */
    public final TableField<MapcontextRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>admin.mapcontext.name</code>.
     */
    public final TableField<MapcontextRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>admin.mapcontext.owner</code>.
     */
    public final TableField<MapcontextRecord, Integer> OWNER = createField(DSL.name("owner"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>admin.mapcontext.description</code>.
     */
    public final TableField<MapcontextRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>admin.mapcontext.crs</code>.
     */
    public final TableField<MapcontextRecord, String> CRS = createField(DSL.name("crs"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>admin.mapcontext.west</code>.
     */
    public final TableField<MapcontextRecord, Double> WEST = createField(DSL.name("west"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>admin.mapcontext.north</code>.
     */
    public final TableField<MapcontextRecord, Double> NORTH = createField(DSL.name("north"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>admin.mapcontext.east</code>.
     */
    public final TableField<MapcontextRecord, Double> EAST = createField(DSL.name("east"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>admin.mapcontext.south</code>.
     */
    public final TableField<MapcontextRecord, Double> SOUTH = createField(DSL.name("south"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>admin.mapcontext.keywords</code>.
     */
    public final TableField<MapcontextRecord, String> KEYWORDS = createField(DSL.name("keywords"), SQLDataType.VARCHAR(256), this, "");

    private Mapcontext(Name alias, Table<MapcontextRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mapcontext(Name alias, Table<MapcontextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.mapcontext</code> table reference
     */
    public Mapcontext(String alias) {
        this(DSL.name(alias), MAPCONTEXT);
    }

    /**
     * Create an aliased <code>admin.mapcontext</code> table reference
     */
    public Mapcontext(Name alias) {
        this(alias, MAPCONTEXT);
    }

    /**
     * Create a <code>admin.mapcontext</code> table reference
     */
    public Mapcontext() {
        this(DSL.name("mapcontext"), null);
    }

    public <O extends Record> Mapcontext(Table<O> child, ForeignKey<O, MapcontextRecord> key) {
        super(child, key, MAPCONTEXT);
    }

    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAPCONTEXT_OWNER_IDX);
    }

    @Override
    public Identity<MapcontextRecord, Integer> getIdentity() {
        return (Identity<MapcontextRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MapcontextRecord> getPrimaryKey() {
        return Keys.MAPCONTEXT_PK;
    }

    @Override
    public List<UniqueKey<MapcontextRecord>> getKeys() {
        return Arrays.<UniqueKey<MapcontextRecord>>asList(Keys.MAPCONTEXT_PK);
    }

    @Override
    public List<ForeignKey<MapcontextRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapcontextRecord, ?>>asList(Keys.MAPCONTEXT__MAPCONTEXT_OWNER_FK);
    }

    private transient CstlUser _cstlUser;

    public CstlUser cstlUser() {
        if (_cstlUser == null)
            _cstlUser = new CstlUser(this, Keys.MAPCONTEXT__MAPCONTEXT_OWNER_FK);

        return _cstlUser;
    }

    @Override
    public Mapcontext as(String alias) {
        return new Mapcontext(DSL.name(alias), this);
    }

    @Override
    public Mapcontext as(Name alias) {
        return new Mapcontext(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapcontext rename(String name) {
        return new Mapcontext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapcontext rename(Name name) {
        return new Mapcontext(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Integer, String, String, Double, Double, Double, Double, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
