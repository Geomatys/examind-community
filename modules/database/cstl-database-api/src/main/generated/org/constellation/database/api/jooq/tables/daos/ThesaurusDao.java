/**
 * This class is generated by jOOQ
 */
package org.constellation.database.api.jooq.tables.daos;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.3"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThesaurusDao extends org.jooq.impl.DAOImpl<org.constellation.database.api.jooq.tables.records.ThesaurusRecord, org.constellation.database.api.jooq.tables.pojos.Thesaurus, java.lang.Integer> {

	/**
	 * Create a new ThesaurusDao without any configuration
	 */
	public ThesaurusDao() {
		super(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS, org.constellation.database.api.jooq.tables.pojos.Thesaurus.class);
	}

	/**
	 * Create a new ThesaurusDao with an attached configuration
	 */
	public ThesaurusDao(org.jooq.Configuration configuration) {
		super(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS, org.constellation.database.api.jooq.tables.pojos.Thesaurus.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected java.lang.Integer getId(org.constellation.database.api.jooq.tables.pojos.Thesaurus object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchById(java.lang.Integer... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public org.constellation.database.api.jooq.tables.pojos.Thesaurus fetchOneById(java.lang.Integer value) {
		return fetchOne(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.ID, value);
	}

	/**
	 * Fetch records that have <code>uri IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByUri(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.URI, values);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByName(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.NAME, values);
	}

	/**
	 * Fetch records that have <code>description IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByDescription(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.DESCRIPTION, values);
	}

	/**
	 * Fetch records that have <code>creation_date IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByCreationDate(java.lang.Long... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.CREATION_DATE, values);
	}

	/**
	 * Fetch records that have <code>state IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByState(java.lang.Boolean... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.STATE, values);
	}

	/**
	 * Fetch records that have <code>defaultlang IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByDefaultlang(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.DEFAULTLANG, values);
	}

	/**
	 * Fetch records that have <code>version IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchByVersion(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.VERSION, values);
	}

	/**
	 * Fetch records that have <code>schemaname IN (values)</code>
	 */
	public java.util.List<org.constellation.database.api.jooq.tables.pojos.Thesaurus> fetchBySchemaname(java.lang.String... values) {
		return fetch(org.constellation.database.api.jooq.tables.Thesaurus.THESAURUS.SCHEMANAME, values);
	}
}
