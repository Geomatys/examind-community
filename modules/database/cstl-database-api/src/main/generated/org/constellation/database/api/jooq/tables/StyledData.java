/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.constellation.database.api.jooq.Admin;
import org.constellation.database.api.jooq.Indexes;
import org.constellation.database.api.jooq.Keys;
import org.constellation.database.api.jooq.tables.records.StyledDataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StyledData extends TableImpl<StyledDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.styled_data</code>
     */
    public static final StyledData STYLED_DATA = new StyledData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StyledDataRecord> getRecordType() {
        return StyledDataRecord.class;
    }

    /**
     * The column <code>admin.styled_data.style</code>.
     */
    public final TableField<StyledDataRecord, Integer> STYLE = createField(DSL.name("style"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>admin.styled_data.data</code>.
     */
    public final TableField<StyledDataRecord, Integer> DATA = createField(DSL.name("data"), SQLDataType.INTEGER.nullable(false), this, "");

    private StyledData(Name alias, Table<StyledDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private StyledData(Name alias, Table<StyledDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.styled_data</code> table reference
     */
    public StyledData(String alias) {
        this(DSL.name(alias), STYLED_DATA);
    }

    /**
     * Create an aliased <code>admin.styled_data</code> table reference
     */
    public StyledData(Name alias) {
        this(alias, STYLED_DATA);
    }

    /**
     * Create a <code>admin.styled_data</code> table reference
     */
    public StyledData() {
        this(DSL.name("styled_data"), null);
    }

    public <O extends Record> StyledData(Table<O> child, ForeignKey<O, StyledDataRecord> key) {
        super(child, key, STYLED_DATA);
    }

    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STYLED_DATA_DATA_IDX, Indexes.STYLED_DATA_STYLE_IDX);
    }

    @Override
    public UniqueKey<StyledDataRecord> getPrimaryKey() {
        return Keys.STYLED_DATA_PK;
    }

    @Override
    public List<UniqueKey<StyledDataRecord>> getKeys() {
        return Arrays.<UniqueKey<StyledDataRecord>>asList(Keys.STYLED_DATA_PK);
    }

    @Override
    public List<ForeignKey<StyledDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StyledDataRecord, ?>>asList(Keys.STYLED_DATA__STYLED_DATA_STYLE_FK, Keys.STYLED_DATA__STYLED_DATA_DATA_FK);
    }

    private transient Style _style;
    private transient Data _data;

    public Style style() {
        if (_style == null)
            _style = new Style(this, Keys.STYLED_DATA__STYLED_DATA_STYLE_FK);

        return _style;
    }

    public Data data() {
        if (_data == null)
            _data = new Data(this, Keys.STYLED_DATA__STYLED_DATA_DATA_FK);

        return _data;
    }

    @Override
    public StyledData as(String alias) {
        return new StyledData(DSL.name(alias), this);
    }

    @Override
    public StyledData as(Name alias) {
        return new StyledData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StyledData rename(String name) {
        return new StyledData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StyledData rename(Name name) {
        return new StyledData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
