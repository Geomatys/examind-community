/*
 * This file is generated by jOOQ.
 */
package org.constellation.database.api.jooq.tables.daos;


import java.util.List;

import org.constellation.database.api.jooq.tables.DatasourceSelectedPath;
import org.constellation.database.api.jooq.tables.records.DatasourceSelectedPathRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasourceSelectedPathDao extends DAOImpl<DatasourceSelectedPathRecord, org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath, Record2<Integer, String>> {

    /**
     * Create a new DatasourceSelectedPathDao without any configuration
     */
    public DatasourceSelectedPathDao() {
        super(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH, org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath.class);
    }

    /**
     * Create a new DatasourceSelectedPathDao with an attached configuration
     */
    public DatasourceSelectedPathDao(Configuration configuration) {
        super(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH, org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath.class, configuration);
    }

    @Override
    public Record2<Integer, String> getId(org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath object) {
        return compositeKeyRecord(object.getDatasourceId(), object.getPath());
    }

    /**
     * Fetch records that have <code>datasource_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchRangeOfDatasourceId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.DATASOURCE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datasource_id IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchByDatasourceId(Integer... values) {
        return fetch(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.DATASOURCE_ID, values);
    }

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchRangeOfPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchByPath(String... values) {
        return fetch(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.PATH, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchByStatus(String... values) {
        return fetch(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.STATUS, values);
    }

    /**
     * Fetch records that have <code>provider_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchRangeOfProviderId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.PROVIDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider_id IN (values)</code>
     */
    public List<org.constellation.database.api.jooq.tables.pojos.DatasourceSelectedPath> fetchByProviderId(Integer... values) {
        return fetch(DatasourceSelectedPath.DATASOURCE_SELECTED_PATH.PROVIDER_ID, values);
    }
}
